// Generated by CoffeeScript 1.12.8
(function() {
  $(function() {
    var $canvas, $level, $levels, $moves, $next, $play, $pushes, $set, $sets, current, done, j, len, levels, next_level, on_done, on_update, oops, opts, play, quit, ref, set_levels, start, x;
    $sets = $('#sets');
    $levels = $('#levels');
    $play = $('#play');
    $next = $('#next');
    $canvas = $('#CANVAS');
    $set = $('#set');
    $level = $('#level');
    $moves = $('#moves');
    $pushes = $('#pushes');
    levels = quit = done = null;
    current = {
      set: 0,
      level: 0
    };
    on_done = function() {
      quit = null;
      return typeof done === "function" ? done() : void 0;
    };
    on_update = function(m, p) {
      $moves.text(m);
      return $pushes.text(p);
    };
    oops = function() {
      return alert('We apologise for the inconvenience...');
    };
    opts = {
      canvas: $canvas[0],
      on_done: on_done,
      on_update: on_update
    };
    ref = 'goal man man_goal object object_goal wall'.split(/\ +/);
    for (j = 0, len = ref.length; j < len; j++) {
      x = ref[j];
      opts[x + "_img"] = $("#" + x + "_img")[0];
    }
    start = function(level) {
      $canvas.focus();
      done = null;
      return quit = sokobang.start(opts, level);
    };
    play = function(set, level) {
      $play.prop('disabled', true);
      current = {
        set: set,
        level: level
      };
      $set.text(levels[set].name);
      $level.text(level + 1);
      on_update(0, 0);
      done = function() {
        return $.get("/levels/level_" + set + "_" + level + ".json").done(function(data) {
          $play.prop('disabled', false);
          return start(data);
        }).fail(oops);
      };
      if (quit) {
        return quit();
      } else {
        return done();
      }
    };
    next_level = function() {
      var l, s;
      s = current.set;
      l = current.level;
      if (l < levels[s].levels - 1) {
        $sets.val(s);
        $levels.val(l + 1);
      } else {
        if (s < levels.length - 1) {
          $sets.val(s + 1);
          set_levels();
        } else {
          alert('There are no more levels.');
        }
      }
      return $play.click();
    };
    set_levels = function() {
      var i, k, n, ref1;
      n = parseInt($sets.val());
      $levels.empty();
      for (i = k = 0, ref1 = levels[n].levels - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        $levels.append($('<option>').val(i).text(i + 1));
      }
      return null;
    };
    return $.get('/levels/levels.json').done(function(data) {
      var i, k, len1;
      levels = data;
      for (i = k = 0, len1 = levels.length; k < len1; i = ++k) {
        x = levels[i];
        $sets.append($('<option>').val(i).text(x.name));
      }
      $sets.change(set_levels);
      $play.click(function() {
        return play(parseInt($sets.val()), parseInt($levels.val()));
      });
      $next.click(next_level);
      $canvas.attr('tabindex', 0);
      set_levels();
      return $play.click();
    }).fail(oops);
  });

}).call(this);
